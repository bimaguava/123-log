---
type   : post
title  : "CI/CD - CircleCI - Part One"
date   : 2020-02-16T09:17:35+07:00
slug   : ci-cd-circleci-01
categories: [devops]
tags      : [git, ssg, deploy]
keywords  : [static site, circleci]
author : epsi
opengraph:
  image: assets/site/images/topics/git.png

toc    : "toc-2020-02-ci-cd-ssg"

excerpt:
  CI/CD for SSG in github using CircleCI.
  This deployment method is using Eleventy and Hexo as SSG test bed.
---

### Preface

> Goal: Deploy SSG in github using CircleCI.

As usual, explanation using figures should be sufficient as a starter.
However,  explanation using `.circleci/config.yml` is must,
as **CircleCI** config is usually longer than **Travis** counterpart.
This a good resource for YAML engineer.

#### When to use Worktree ?

For `CircleCI+Github` tier using NodeJS based SSG.
Most work will simply be done using `gh-pages`.
It is an NPM based app to manage github pages.

For the rest other than this tier,
we are going to utilize `git worktree` to reduce build time.
We can see how useful `git worktree` in this CircleCI situation.

#### Official Site

* <https://circleci.com>

#### Table of Content

* Preface: Table of Content

* 1: Prepare Your Repo

* 2: Setting Up SSH Keys

* 3: Prepare Your Configuration

* 4: Summary: NodeJS based SSG

* What is Next ?

-- -- --

### 1: Prepare Your Repository

Just like Travis, CircleCI is a third party CI/CD.
CircleCI can read from github/bitbucket repository,
then build your favorite SSG,
and write back to repository,
or do something else, such as Amazon S3 thing.

Unlike Travis counterpart, who has tight couple with github pages,
CircleCI is more flexible, but yet more complex.

#### Sign In

Your first attempt should be, creating account

* <https://circleci.com/vcs-authorize/>

![CircleCI: Sign-in][image-ss-circleci-00]

#### Supported Repository

CircleCI support these two cvs repositories:

* <https://github.com/> (git)

* <https://bitbucket.org/> (git, mercurial))

I have successfully build in github.
But I never try CircleCI for bitbucket.
I will explore `CircleCI+Bitbucket` tier later.

Gitlab have their own internal CD/CD.
So gitlab user do nt need either Travis nor CircleCI.

What happened when you sign in to an account with empty jobs?
Consider have a look at my bitbucket account.

![CircleCI: Sign-in with bitbucket][image-ss-circleci-01]

For the rest of this guidance,
I'm going to use my github account.
This would looks different,
because I already have some Travis jobs over there.

![CircleCI: Sign-in with github][image-ss-circleci-02]

* <https://circleci.com/dashboard>

#### Practice

Now you can make repository, with any name, for example:

1. Jekyll:
   * 游동 Repo: <https://github.com/epsi-rns/circleci-jekyll>
   * 游동 Site: <https://epsi-rns.github.io/circleci-jekyll/>
   * 游동 CircleCI: <https://circleci.com/gh/epsi-rns/circleci-jekyll>

2. Eleventy:
   * 游동 Repo: <https://github.com/epsi-rns/circleci-11ty>
   * 游동 Site: <https://epsi-rns.github.io/circleci-11ty/>
   * 游동 CircleCI: <https://circleci.com/gh/epsi-rns/circleci-11ty>

3. Hexo:
   * 游동 Repo: <https://github.com/epsi-rns/circleci-hexo>
   * 游동 Site: <https://epsi-rns.github.io/circleci-hexo/>
   * 游동 CircleCI: <https://circleci.com/gh/epsi-rns/circleci-hexo>

4. Pelican:
   * 游동 Repo: <https://github.com/epsi-rns/circleci-pelican>
   * 游동 Site: <https://epsi-rns.github.io/circleci-pelican/>
   * 游동 CircleCI: <https://circleci.com/gh/epsi-rns/circleci-pelican>
  
5. Hugo:
   * 游동 Repo: <https://github.com/epsi-rns/circleci-hugo>
   * 游동 Site: <https://epsi-rns.github.io/circleci-hugo/>
   * 游동 CircleCI: <https://circleci.com/gh/epsi-rns/circleci-hugo>

![Github: Project Page Repository][image-ss-github-pelican]

This is just an example,
you should use your username account.
and you should use your own repository

-- -- --

### 2: Managing SSH Keys

As said before, CircleCI can write to repository.
This privilege require security access,
that can be granted with SSH keys.

> How do I set-up SSH keys 游뱂?

#### Checkout Menu

Unlike Travis, CircleCI use different keys for each project.
SSH keys can be automatically generated by CircleCI.
By default, it is `read-only`.
To enable `read-write` we have to configure.

![CircleCI: Checkout SSH Keys][image-ss-circleci-03]

#### Generate User Key

For most my SSG project, I remove the `read only` access, 
and generate new user key with `re write` privilege.

![CircleCI: Generated User Key][image-ss-circleci-04]

#### Github User Keys

If you do not need the key anymore,
you can delete each keys manually from github.

![CircleCI: List of User Keys in Github][image-ss-circleci-05]

You can spot the orphaned keys by the color.

-- -- --

### 3: Prepare Your Configuration

Allright. I have a ready to use SSG, let's say eleventy,
that I have put in `circleci-11ty` repository on github account.
What to do next 游뱂?

#### Workflows

As a starter, examine this YAML configuration below:

* [11ty: .circleci/config.yml][circleci-yaml-11ty]

{{< highlight yaml >}}
version: 2

workflows:
  version: 2
  build:
    jobs:
      - buildsite:
         filters:
            branches:
              only: master
{{< / highlight >}}

For the sake of simplicity,
I only make one job called `buildsite`.

Each SSG have a different configuration.
But the basic is pretty similar.

Save this in directory called `.circleci` and name it as `config.yml`.
Add file, commit and push to `travis-11ty` repository.

There is a detail for this as we will explain it later.
For a while consider skip the detail,
and fast forward to the result as below:

![CircleCI: Eleventy Build Time][image-ss-circleci-06]

You can spot the `buildsite` job in figure above.

#### Jobs

The build process itself has skeleton as below:

{{< highlight yaml >}}
jobs:
  buildsite:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - add_ssh_keys:
          ...
      - run:
          name: Prepare Git Initialization
          ...
      - run:
          name: Install and Configure Dependencies
          ...
      - run: 
          name: Install Eleventy Site Dependencies
          ...
      - run: 
          name: Generate Eleventy Static Files
          ...
      - deploy:
          ...
{{< / highlight >}}

The keyword `run` and `deploy` are _interchangeable__,
it means you can replace one with another.

Again, skip the detail and preview the skeleton of the process build

![CircleCI: Eleventy Build Time][image-ss-circleci-07]

You can see each steps in figure above.

#### Docker Image

The most precedence part that should be done,
before doing anything is choosing proper docker image.

{{< highlight yaml >}}
jobs:
  buildsite:
    docker:
      - image: node:8.10.0
{{< / highlight >}}

Each SSG has their own images.

![CircleCI: Docker Image][image-ss-circleci-08]

Docker image process comes under section: __Spin Up Environment__.
Choosing proper docker image is not just saved you lines of code,
but also affect build minutes.
In some case, it takes more than image of docker build.
More docker image means more build time.
Some docker images is so old that might not having feature you require.

#### SSH Keys

The next step is to write down your generated user image in configuration.

{{< highlight yaml >}}
jobs:
  buildsite:
    ...
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "44:96:a5:95:1e:86:90:cf:e6:ef:67:e7:33:23:3b:0f"
{{< / highlight >}}

Do you have any security issue?
Or do you want to put the `fingerprints` in environment variable?
You may desire to read the explanation here.

* <https://circleci.com/docs/2.0/add-ssh-key/#advanced-usage>

Ypu can put this __fingerprints__ anywhere,
no need in top most step.
Just make sure that __fingerprints__ is placed before writing to `gh-pages`.

#### Run

The rest is so self explanatory.
They are all just git command.

{{< highlight yaml >}}
jobs:
  buildsite:
    ...
    steps:
      ...
      - run:
          name: Disable jekyll builds
          command: touch ~/.nojekyll
      - run:
          name: Prepare Git Initialization
          command: |
            git config user.email "someone@somewhere"
            git config user.name "someone"
      - run:
          name: Install and Configure Dependencies
          command: |
            npm install -g gh-pages@2.0.1
            npm install -g @11ty/eleventy
      - run: 
          name: Install Eleventy Site Dependencies
          command: npm install
      - run: 
          name: Generate Eleventy Static Files
          command: eleventy --pathprefix="/circleci-11ty/"
{{< / highlight >}}

First thing first.
We need to setup git.

{{< highlight bash >}}
git config user.email "someone@somewhere"
git config user.name "someone"
{{< / highlight >}}

You can add any bash command,
such as adding `~/.nojekyll`,
so that github treat it as plain static html.

#### Deploy

If everything is fine we can continue to deploy section.

{{< highlight yaml >}}
jobs:
  buildsite:
    ...
    steps:
      ...
      - run:
          ...
      - deploy:
          name: Deploy Static Files to gh-pages Branch
          command: gh-pages --dotfiles --message "[skip ci] Updates" --dist dist
{{< / highlight >}}

This `gh-pages` is an NodeJS based module.

* <https://github.com/tschaub/gh-pages>

We have previously install `gh-pages` with this command.

{{< highlight yaml >}}
      ...
      - run:
          name: Install and Configure Dependencies
          command: |
            npm install -g gh-pages@2.0.1
            ...
{{< / highlight >}}

This `gh-pages` do the magic,
reading from your build directory in `master` branch,
such as `_site` or `public` or `dist`,
and writing to `gh-pages` branch.

This method works good with NodeJS based application in github.
But be aware that we require different approach for other case.

#### Avoid Unnecessary gh-pages Build.

By default any changes in repository will trigger CircleCI.
Just add `[skip-ci]` in commit message to avoid build in `gh-pages` branch.

![CircleCI: Docker Image][image-ss-circleci-09]

-- -- --

### 4: Summary: NodeJS based SSG

As a summary here is the complete config for NodeJS based SSG.

#### 1: Eleventy

Consider rewrite all above in one configuration.

* [11ty: .circleci/config.yml][circleci-yaml-11ty]

{{< highlight yaml >}}
version: 2

workflows:
  version: 2
  build:
    jobs:
      - buildsite:
         filters:
            branches:
              only: master

jobs:
  buildsite:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "44:96:a5:95:1e:86:90:cf:e6:ef:67:e7:33:23:3b:0f"
      - run:
          name: Disable jekyll builds
          command: touch ~/.nojekyll
      - run:
          name: Prepare Git Initialization
          command: |
            git config user.email "someone@somewhere"
            git config user.name "someone"
      - run:
          name: Install and Configure Dependencies
          command: |
            npm install -g gh-pages@2.0.1
            npm install -g @11ty/eleventy
      - run: 
          name: Install Eleventy Site Dependencies
          command: npm install
      - run: 
          name: Generate Eleventy Static Files
          command: eleventy --pathprefix="/circleci-11ty/"
      - deploy:
          name: Deploy Static Files to gh-pages Branch
          command: gh-pages --dotfiles --message "[skip ci] Updates" --dist dist
{{< / highlight >}}

#### 2: Hexo

Configuration for Hexo is pretty similar to Eleventy.

* [Hexo: .circleci/config.yml][circleci-yaml-hexo]

{{< highlight yaml >}}
version: 2

workflows:
  version: 2
  build:
    jobs:
      - build:
         filters:
            branches:
              only: master

jobs:
  build:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - run:
          name: Disable jekyll builds
          command: touch ~/.nojekyll
      - run:
          name: Prepare Git Initialization
          command: |
            git config user.email "someone@somewhere"
            git config user.name "someone"
      - run:
          name: Install and Configure Dependencies
          command: |
            npm install -g gh-pages@2.0.1
            npm install -g hexo-cli
      - run: 
          name: Install Hexo Site Dependencies
          command: npm install
      - run: 
          name: Generate Hexo Static Files
          command: hexo generate 
      - add_ssh_keys:
          fingerprints:
            - "34:65:f3:a6:58:55:cc:fa:29:96:44:73:e2:6a:f9:64"
      - run:
          name: Deploy Static Files to gh-pages Branch
          command: gh-pages --dotfiles --message "[skip ci] Updates" --dist public
{{< / highlight >}}

-- -- --

### What is Next ?

We are done with basic stuff.

Consider continue reading [ [CI/CD - CircleCI - Part Two][local-whats-next] ].
A more complex example, applying `git worktree` in CircleCI.

[//]: <> ( -- -- -- links below -- -- -- )

[local-whats-next]:     {{< baseurl >}}/devops/2020/02/16/ci-cd-circleci-02/

[circleci-yaml-hexo]:       https://github.com/epsi-rns/circleci-hexo/blob/master/.circleci/config.yml
[circleci-yaml-11ty]:       https://github.com/epsi-rns/circleci-11ty/blob/master/.circleci/config.yml

[image-ss-github-pelican]:  {{< baseurl >}}assets/posts/devops/2020/02/circleci/06-github-circleci-pelican.png
[image-ss-circleci-00]: {{< baseurl >}}assets/posts/devops/2020/02/circleci/06-circleci-00-signin.png
[image-ss-circleci-01]: {{< baseurl >}}assets/posts/devops/2020/02/circleci/06-circleci-01-signin-bitbucket.png
[image-ss-circleci-02]: {{< baseurl >}}assets/posts/devops/2020/02/circleci/06-circleci-02-signin-github.png
[image-ss-circleci-03]: {{< baseurl >}}assets/posts/devops/2020/02/circleci/06-circleci-03-ssh-keys-menu.png
[image-ss-circleci-04]: {{< baseurl >}}assets/posts/devops/2020/02/circleci/06-circleci-04-generated-user-key.png
[image-ss-circleci-05]: {{< baseurl >}}assets/posts/devops/2020/02/circleci/06-circleci-05-github-user-keys.png
[image-ss-circleci-06]: {{< baseurl >}}assets/posts/devops/2020/02/circleci/06-circleci-06-11ty-build-time.png
[image-ss-circleci-07]: {{< baseurl >}}assets/posts/devops/2020/02/circleci/06-circleci-07-11ty-steps.png
[image-ss-circleci-08]: {{< baseurl >}}assets/posts/devops/2020/02/circleci/06-circleci-08-docker-image.png
[image-ss-circleci-09]: {{< baseurl >}}assets/posts/devops/2020/02/circleci/06-circleci-09-skip-ci.png
